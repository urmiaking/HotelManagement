@page "/hotel-amenity/create"
@page "/hotel-amenity/edit/{Id:int}"

@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject IHotelAmenityRepository HotelAmenityRepository
@attribute [Authorize(Roles = StaticVariables.RoleAdmin)]

<div class="row mt-2 mb-5">
    <h3 class="card-title text-info m-3">@Title امکانات</h3>
    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                <EditForm Model="HotelAmenityModel" OnValidSubmit="HandleHotelAmenityUpsert">
                    <DataAnnotationsValidator></DataAnnotationsValidator>
                    @*<ValidationSummary></ValidationSummary>*@
                    <div class="form-group">
                        <label>عنوان امکانات</label>
                        <InputText @bind-Value="HotelAmenityModel.Name" class="form-control" />
                        <ValidationMessage For="() => HotelAmenityModel.Name"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>ظرفیت</label>
                        <InputText @bind-Value="HotelAmenityModel.Description" class="form-control" />
                        <ValidationMessage For="() => HotelAmenityModel.Description"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>زمان بندی</label>
                        <InputText @bind-Value="HotelAmenityModel.Timing" class="form-control" />
                        <ValidationMessage For="() => HotelAmenityModel.Timing"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>نماد</label>
                        <InputText @bind-Value="HotelAmenityModel.Icon" class="form-control" />
                    </div>
                    <div class="form-group mt-4">
                        <button class="btn btn-primary">@Title امکانات</button>
                        <NavLink href="hotel-room" class="btn btn-secondary">بازگشت</NavLink>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code
{
    [Parameter]
    public int? Id { get; set; }

    private HotelAmenityDto HotelAmenityModel { get; set; } = new();

    private string Title { get; set; } = "افزودن";

    protected override async Task OnInitializedAsync()
    {
        if (Id is not null)
        {
            // Update
            Title = "ویرایش";
            HotelAmenityModel = await HotelAmenityRepository.GetHotelAmenity(Id.Value);
        }
        else
        {
            // Create
            HotelAmenityModel = new HotelAmenityDto();
        }
    }

    private async Task HandleHotelAmenityUpsert()
    {
        try
        {
            var amenityDetailsByName = await HotelAmenityRepository.IsAmenityUnique(HotelAmenityModel.Name, HotelAmenityModel.Id);

            if (amenityDetailsByName is not null)
            {
                await JsRuntime.ToastrError("اتاقی با این نام از قبل وجود دارد!");
                return;
            }

            if (HotelAmenityModel.Id != 0)
            {
                // Update
                await HotelAmenityRepository.UpdateHotelAmenity(HotelAmenityModel.Id, HotelAmenityModel);
                await JsRuntime.ToastrSuccess("امکانات با موفقیت ویرایش شد");
            }
            else
            {
                // Create
                await HotelAmenityRepository.CreateHotelAmenity(HotelAmenityModel);
                await JsRuntime.ToastrSuccess("امکانات با موفقیت ایجاد شد");
            }

            NavigationManager.NavigateTo("/hotel-amenity");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }

    }
}