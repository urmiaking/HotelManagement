@page "/hotel-room/create"
@page "/hotel-room/edit/{Id:int}"
@using HotelManagement.Server.Services

@inject IHotelRoomRepository HotelRoomRepository
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject IFileUploadService FileUploadService
@inject IHotelImagesRepository HotelImagesRepository

<div class="row mt-2 mb-5">
    <h3 class="card-title text-info m-3">@Title اتاق</h3>
    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                <EditForm Model="HotelRoomModel" OnValidSubmit="HandleHotelRoomUpsert">
                    <DataAnnotationsValidator></DataAnnotationsValidator>
                    @*<ValidationSummary></ValidationSummary>*@
                    <div class="form-group">
                        <label>عنوان اتاق</label>
                        <InputText @bind-Value="HotelRoomModel.Name" class="form-control" />
                        <ValidationMessage For="() => HotelRoomModel.Name"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>ظرفیت</label>
                        <InputNumber @bind-Value="HotelRoomModel.Occupancy" class="form-control" />
                        <ValidationMessage For="() => HotelRoomModel.Occupancy"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>قیمت</label>
                        <InputNumber @bind-Value="HotelRoomModel.RegularRate" class="form-control" />
                        <ValidationMessage For="() => HotelRoomModel.RegularRate"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>جزئیات</label>
                        <BlazoredTextEditor @ref="@TextEditor" Placeholder="جزییات اتاق را وارد کنید">
                            <ToolbarContent>
                                <select class="ql-header">
                                    <option selected=""></option>
                                    <option value="1"></option>
                                    <option value="2"></option>
                                    <option value="3"></option>
                                    <option value="4"></option>
                                    <option value="5"></option>
                                </select>
                                <span class="ql-formats">
                                    <button class="ql-bold"></button>
                                    <button class="ql-italic"></button>
                                    <button class="ql-underline"></button>
                                    <button class="ql-strike"></button>
                                </span>
                                <span class="ql-formats">
                                    <select class="ql-color"></select>
                                    <select class="ql-background"></select>
                                </span>
                                <span class="ql-formats">
                                    <button class="ql-list" value="ordered"></button>
                                    <button class="ql-list" value="bullet"></button>
                                </span>
                                <span class="ql-formats">
                                    <button class="ql-link"></button>
                                </span>
                            </ToolbarContent>
                            <EditorContent></EditorContent>
                        </BlazoredTextEditor>
                        @*<InputTextArea @bind-Value="HotelRoomModel.Details" class="form-control" />*@
                    </div>
                    <div class="form-group">
                        <label>زیربنا</label>
                        <InputText @bind-Value="HotelRoomModel.SqFt" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label>عکس</label>
                        <InputFile class="form-control" OnChange="HandleImageUpload" multiple />
                        <div class="row">
                            @if (IsImageUploadProcessStarted)
                            {
                                <div class="col-md-12">
                                    <span><i class="fa fa-spin fa-spinner"></i>در حال بارگذاری عکس ها...</span>
                                </div>
                            }
                            @if (HotelRoomModel.ImageUrls is { Count: > 0 })
                            {
                                var serial = 1;
                                foreach (var image in HotelRoomModel.ImageUrls)
                                {
                                    <div class="col-md-2 mt-3">
                                        <div class="room-image" style="background: url('@image') 50% 50%;">
                                            <span class="room-image-title">@serial</span>
                                        </div>

                                        <button type="button" @onclick="() => DeletePhoto(image)" class="btn btn-outline-danger mt-4 col-12">
                                            حذف
                                        </button>
                                    </div>
                                    serial++;
                                }
                            }
                        </div>
                    </div>
                    <div class="form-group mt-4">
                        <button class="btn btn-primary">@Title اتاق</button>
                        <NavLink href="hotel-room" class="btn btn-secondary">بازگشت</NavLink>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code
{
    [Parameter]
    public int? Id { get; set; }

    public BlazoredTextEditor TextEditor { get; set; } = new BlazoredTextEditor();

    private HotelRoomDto HotelRoomModel { get; set; } = new();
    private HotelRoomImageDto RoomImage { get; set; } = new();
    private List<string> DeletedImageNames { get; set; } = default!;
    private bool IsImageUploadProcessStarted { get; set; } = false;

    private string Title { get; set; } = "افزودن";

    protected override async Task OnInitializedAsync()
    {
        if (Id is not null)
        {
            // Update
            Title = "ویرایش";
            HotelRoomModel = await HotelRoomRepository.GetHotelRoom(Id.Value);
            if (HotelRoomModel.Images is { Count: > 0 })
            {
                HotelRoomModel.ImageUrls = HotelRoomModel.Images.Select(a => a.RoomImageUrl).ToList();
            }
        }
        else
        {
            // Create
            HotelRoomModel = new HotelRoomDto();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        var loading = true;

        while (loading)
        {
            try
            {
                if (!string.IsNullOrEmpty(HotelRoomModel.Details))
                {
                    await TextEditor.LoadHTMLContent(HotelRoomModel.Details);
                }
                loading = false;
            }
            catch
            {
                await Task.Delay(10);
                loading = true;
            }
        }
    }

    private async Task HandleHotelRoomUpsert()
    {
        try
        {
            var roomDetailsByName = await HotelRoomRepository.IsRoomUnique(HotelRoomModel.Name, HotelRoomModel.Id);

            if (roomDetailsByName is not null)
            {
                await JsRuntime.ToastrError("اتاقی با این نام از قبل وجود دارد!");
                return;
            }

            if (HotelRoomModel.Id != 0)
            {
                HotelRoomModel.Details = await TextEditor.GetHTML();
                // Update
                var updateRoomResult = await HotelRoomRepository.UpdateHotelRoom(HotelRoomModel.Id, HotelRoomModel);

                if (HotelRoomModel.ImageUrls is { Count: > 0 })
                {
                    if (DeletedImageNames != null && DeletedImageNames.Any())
                    {
                        foreach (var deletedImageName in DeletedImageNames)
                        {
                            var imageName = deletedImageName.Replace($"{NavigationManager.BaseUri}roomImages/", "");

                            FileUploadService.DeleteFile(imageName);

                            await HotelImagesRepository.DeleteHotelRoomImageByImageUrl(deletedImageName);
                        }
                    }

                    await AddHotelRoomImage(updateRoomResult);
                }

                await JsRuntime.ToastrSuccess("اتاق با موفقیت ویرایش شد");
            }
            else
            {
                // Create
                var createdResult = await HotelRoomRepository.CreateHotelRoom(HotelRoomModel);
                await AddHotelRoomImage(createdResult);
                await JsRuntime.ToastrSuccess("اتاق با موفقیت ایجاد شد");
            }

            NavigationManager.NavigateTo("/hotel-room");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }

    }

    private async Task AddHotelRoomImage(HotelRoomDto roomDetails)
    {
        foreach (var imageUrl in HotelRoomModel.ImageUrls
            .Where(imageUrl => HotelRoomModel.Images == null ||
                               HotelRoomModel.Images.Count(a => a.RoomImageUrl == imageUrl) == 0))
        {
            RoomImage = new HotelRoomImageDto
                {
                    RoomId = roomDetails.Id,
                    RoomImageUrl = imageUrl
                };

            await HotelImagesRepository.CreateHotelRoomImage(RoomImage);
        }
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        IsImageUploadProcessStarted = true;

        try
        {
            var images = new List<string>();

            if (e.GetMultipleFiles().Count > 0)
            {
                foreach (var file in e.GetMultipleFiles())
                {
                    var fileInfo = new FileInfo(file.Name);

                    if (fileInfo.Extension.ToLower() == ".jpg" ||
                        fileInfo.Extension.ToLower() == ".jpeg" ||
                        fileInfo.Extension.ToLower() == ".png")
                    {
                        var uploadedImagePath = await FileUploadService.UploadFileAsync(file);

                        images.Add(uploadedImagePath);
                    }
                    else
                    {
                        await JsRuntime.ToastrError("فرمت عکس اشتباه است! لطفا تنها از فرمت های jpg, jpeg و png استفاده کنید.");
                        return;
                    }
                }

                if (images.Any())
                {
                    if (HotelRoomModel.ImageUrls != null && HotelRoomModel.ImageUrls.Count > 0)
                    {
                        HotelRoomModel.ImageUrls.AddRange(images);
                    }
                    else
                    {
                        HotelRoomModel.ImageUrls = new List<string>();
                        HotelRoomModel.ImageUrls.AddRange(images);
                    }
                }
                else
                {
                    await JsRuntime.ToastrError("بارگذاری عکس با خطا مواجه شد");
                }
            }
        }
        catch (Exception ex)
        {
            await JsRuntime.ToastrError(ex.Message);
        }
        finally
        {
            IsImageUploadProcessStarted = false;
        }
    }

    private async Task DeletePhoto(string imageUrl)
    {
        try
        {
            var imageIndex = HotelRoomModel.ImageUrls.FindIndex(x => x == imageUrl);
            var imageName = imageUrl.Replace($"{NavigationManager.BaseUri}roomImages/", "");

            if (HotelRoomModel.Id == 0)
            {
                // Create
                var result = FileUploadService.DeleteFile(imageName);
            }
            else
            {
                // Update
                DeletedImageNames ??= new List<string>();
                DeletedImageNames.Add(imageUrl);
            }
            HotelRoomModel.ImageUrls.RemoveAt(imageIndex);
        }
        catch (Exception e)
        {
            await JsRuntime.ToastrError(e.Message);
        }
    }
}
