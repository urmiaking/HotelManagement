@page "/hotel-room"
@using HotelManagement.Server.Services

@inject IHotelRoomRepository HotelRoomRepository
@inject IJSRuntime JsRuntime
@inject IFileUploadService FileService

<div class="row mt-4">
    <div class="col-7">
        <h4 class="card-title text-info">لیست اتاق ها</h4>
    </div>
    <div class="col-3 offset-1">
        <NavLink href="hotel-room/create" class="btn btn-info form-control">افزودن اتاق جدید</NavLink>
    </div>
</div>

<div class="row mt-4">
    <div class="col-12">
        <table class="table table-bordered table-hover">
            <thead>
            <tr>
                <th>نام اتاق</th>
                <th>ظرفیت</th>
                <th>قیمت</th>
                <th>زیربنا</th>
                <th>جزییات</th>
                <th>عملیات</th>
            </tr>
            </thead>
            <tbody>
                @if (HotelRooms.Any())
                {
                    foreach (var hotelRoom in HotelRooms)
                    {
                        <tr>
                            <td>@hotelRoom.Name</td>
                            <td>@hotelRoom.Occupancy</td>
                            <td>@hotelRoom.RegularRate</td>
                            <td>@hotelRoom.SqFt</td>
                            <td>@(new MarkupString(hotelRoom.Details))</td>
                            <td>
                                <NavLink href="@($"hotel-room/edit/{hotelRoom.Id}")" class="btn btn-info">ویرایش</NavLink>
                                <button class="btn btn-danger" @onclick="() => HandleDelete(hotelRoom.Id)">حذف</button>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="5">هیچ اتاقی یافت نشد</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<DeleteConfirmation ConfirmationChanged="ConfirmDelete_Click" IsParentComponentProcessing="IsProcessing"></DeleteConfirmation>

@code
{
    private IEnumerable<HotelRoomDto> HotelRooms { get; set; } = new List<HotelRoomDto>();
    private int? DeleteRoomId { get; set; } = null;
    public bool IsProcessing { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        HotelRooms = await HotelRoomRepository.GetAllHotelRooms();
    }

    public async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsProcessing = true;
        if (isConfirmed && DeleteRoomId != null)
        {
            var hotelRoom = await HotelRoomRepository.GetHotelRoom(DeleteRoomId.Value);

            foreach (var image in hotelRoom.Images)
            {
                var imageName = image.RoomImageUrl.Replace($"roomImages/", "");
                FileService.DeleteFile(imageName);
            }

            await HotelRoomRepository.DeleteHotelRoom(DeleteRoomId.Value);
            await JsRuntime.ToastrSuccess("اتاق با موفقیت حذف شد");
            HotelRooms = await HotelRoomRepository.GetAllHotelRooms();
        }

        await JsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
        IsProcessing = false;
    }

    public async Task HandleDelete(int roomId)
    {
        DeleteRoomId = roomId;
        await JsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");
    }
}
