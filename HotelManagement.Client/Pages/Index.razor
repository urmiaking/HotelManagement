@page "/"
@inject ILocalStorageService LocalStorage
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject IHotelAmenityService HotelAmenityService

<div class="row p-0 m-0">
    <div id="carouselExampleIndicators" class="carousel slide" data-ride="carousel">
        <ol class="carousel-indicators">
            <li data-target="#carouselExampleIndicators" data-slide-to="0" class="active"></li>
            <li data-target="#carouselExampleIndicators" data-slide-to="1"></li>
        </ol>
        <div class="carousel-inner">
            <div class="carousel-item active">
                <img class="d-block w-100" src="images/slide1.jpg" alt="First slide">
            </div>
            <div class="carousel-item">
                <img class="d-block w-100" src="images/slide2.jpg" alt="Second slide">
            </div>
        </div>
        <a class="carousel-control-prev" href="#carouselExampleIndicators" role="button" data-slide="prev">
            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Previous</span>
        </a>
        <a class="carousel-control-next" href="#carouselExampleIndicators" role="button" data-slide="next">
            <span class="carousel-control-next-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Next</span>
        </a>
    </div>
</div>
<EditForm Model="HomeModel" OnValidSubmit="SaveInitialData">
    <div class="row p-0 mx-0 mt-4">

        <div class="col-12 col-md-5  offset-md-1 px-2  px-2 px-md-0">
            <div class="form-group">
                <label>Check In Date</label>
                
                <InputDate min="@DateTime.Now.ToString("yyyy-MM-dd")" @bind-Value="HomeModel.StartDate" class="form-control" />
            </div>
        </div>

        <div class="col-8 col-md-3 px-2">
            <div class="form-group">
                <label>No. of nights</label>
                <select class="form-control" @bind="HomeModel.NumberOfNights">
                    @for (var i = 1; i <= 10; i++)
                    {
                        <option value="@i">@i</option>
                    }
                </select>
            </div>
        </div>

        <div class="col-4 col-md-2 p-0 pr-2">
            <div class="form-group">
                <label>&nbsp;</label>

                <input type="submit" value="Go" class="btn btn-success col-12" />

            </div>
        </div>
        
    </div>
</EditForm>

<hr />
<div class="container pt-4">
    <div class="row">
        <div class="col-md-8 offset-md-2 text-center">
            <h2 class="text-warning">Explore our Amenities</h2>
            <p class="lead">Far far away, behind the word mountains, far from the countries Vokalia and Consonantia, there live the blind texts.</p>
        </div>
    </div>
    <div class="row">
        
        @if (HotelAmenities != null)
        {
            @foreach (var amenity in HotelAmenities)
            {
                <div class="col-md-4 col-6 p-4">
                    <div style="border: 1px solid #d5d5d5; border-radius: 20px;">
                        <div class="row col-4 offset-4 p-4">
                            <i class="@amenity.Icon fa-4x"></i>
                        </div>
                        <div class="text-center justify-content-center">
                            <h5 class="text-warning">@amenity.Name</h5>
                            <p>@amenity.Description</p>
                        </div>

                    </div>
                </div>
            }
        }

    </div>

</div>

@code
{
    public HomeVm HomeModel { get; set; } = new ();
    private IEnumerable<HotelAmenityDto>? HotelAmenities { get; set; } = new List<HotelAmenityDto>();

    private async Task SaveInitialData()
    {
        try
        {
            HomeModel.EndDate = HomeModel.StartDate.AddDays(HomeModel.NumberOfNights);
            await LocalStorage.SetItemAsync(StaticVariables.LocalInitialBooking, HomeModel);

            NavigationManager.NavigateTo("/hotel/rooms", forceLoad: true);
        }
        catch (Exception e)
        {
            await JsRuntime.ToastrError(e.Message);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        HotelAmenities = await HotelAmenityService.GetAllHotelAmenities();
    }
}
